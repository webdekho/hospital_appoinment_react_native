import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, Image, ActivityIndicator, Pressable } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { MaterialIcons } from '@expo/vector-icons';
import CommonHeader from '../../components/CommonHeader';
import ApiService from '../../services/api';

export default function ServicesScreen() {
  const [services, setServices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [pagination, setPagination] = useState({
    current_page: 1,
    total_pages: 1,
    total_items: 0,
    items_per_page: 20,
    has_next_page: false,
    has_prev_page: false
  });
  const [loadingMore, setLoadingMore] = useState(false);

  useEffect(() => {
    fetchServices();
  }, []);

  const fetchServices = async (page = 1, append = false) => {
    try {
      if (page === 1) {
        setLoading(true);
      } else {
        setLoadingMore(true);
      }
      setError(null);
      
      const isAuthenticated = await ApiService.isAuthenticated();
      if (!isAuthenticated) {
        // Use fallback data if not authenticated
        const fallbackServices = getFallbackServices();
        setServices(fallbackServices);
        setPagination({
          current_page: 1,
          total_pages: 1,
          total_items: fallbackServices.length,
          items_per_page: 20,
          has_next_page: false,
          has_prev_page: false
        });
        setLoading(false);
        return;
      }

      const response = await ApiService.getServices(20, page, searchQuery);
      
      if (response.success && response.data.status) {
        console.log('Services API response:', response.data);
        console.log('Services data:', response.data.data);
        console.log('Pagination data:', response.data.pagination);
        const newServices = response.data.data || [];
        
        if (append && page > 1) {
          setServices(prevServices => [...prevServices, ...newServices]);
        } else {
          setServices(newServices);
        }
        
        setPagination(response.data.pagination || {
          current_page: 1,
          total_pages: 1,
          total_items: newServices.length,
          items_per_page: 20,
          has_next_page: false,
          has_prev_page: false
        });
      } else {
        console.log('Services API failed, using fallback data');
        const fallbackServices = getFallbackServices();
        setServices(fallbackServices);
        setPagination({
          current_page: 1,
          total_pages: 1,
          total_items: fallbackServices.length,
          items_per_page: 20,
          has_next_page: false,
          has_prev_page: false
        });
      }
    } catch (error) {
      console.error('Error fetching services:', error);
      setError('Failed to load services');
      const fallbackServices = getFallbackServices();
      setServices(fallbackServices);
      setPagination({
        current_page: 1,
        total_pages: 1,
        total_items: fallbackServices.length,
        items_per_page: 20,
        has_next_page: false,
        has_prev_page: false
      });
    } finally {
      setLoading(false);
      setLoadingMore(false);
    }
  };

  const getFallbackServices = () => [
    {
      id: 1,
      service_name: 'Knee Arthritis Treatment',
      title: 'Knee Arthritis Treatment',
      description: 'Comprehensive treatment for knee arthritis including pain management and rehabilitation.',
      cost: 5000,
      duration: 60,
      photo: null
    },
    {
      id: 2,
      service_name: 'Kidney Failure Treatment',
      title: 'Kidney Failure Treatment',
      description: 'Advanced treatment options for kidney failure including dialysis and transplant support.',
      cost: 15000,
      duration: 120,
      photo: null
    },
    {
      id: 3,
      service_name: 'Cardiac Surgery',
      title: 'Cardiac Surgery',
      description: 'Expert cardiac surgical procedures for various heart conditions.',
      cost: 25000,
      duration: 180,
      photo: null
    },
    {
      id: 4,
      service_name: 'Neurosurgery',
      title: 'Neurosurgery',
      description: 'Specialized neurosurgical procedures for brain and spine conditions.',
      cost: 30000,
      duration: 240,
      photo: null
    },
    {
      id: 5,
      service_name: 'Orthopedic Surgery',
      title: 'Orthopedic Surgery',
      description: 'Advanced orthopedic surgical procedures for bone and joint conditions.',
      cost: 20000,
      duration: 150,
      photo: null
    },
    {
      id: 6,
      service_name: 'Emergency Care',
      title: 'Emergency Care',
      description: '24/7 emergency medical care for critical conditions.',
      cost: 8000,
      duration: 90,
      photo: null
    }
  ];

  const getServiceImageUri = (service) => {
    if (service.photo && service.photo.trim() !== '' && service.photo !== 'null') {
      const cleanPhoto = service.photo.replace(/^\/+/, '');
      
      // Handle different photo path formats
      if (cleanPhoto.startsWith('http')) {
        return cleanPhoto;
      } else if (cleanPhoto.startsWith('uploads/')) {
        return `${ApiService.getBaseUrl()}/${cleanPhoto}`;
      } else {
        // For simple filenames like "emergency.jpg", assume they're in uploads/services/
        return `${ApiService.getBaseUrl()}/uploads/services/${cleanPhoto}`;
      }
    }
    return null;
  };

  const getDefaultImage = (index) => {
    const images = [
      require('../../assets/images/kidney.png'),
      require('../../assets/images/hosptial.png'),
      require('../../assets/images/heart.png.png'),
      require('../../assets/images/kidney.png'),
      require('../../assets/images/hosptial.png'),
      require('../../assets/images/heart.png.png')
    ];
    return images[index % images.length];
  };

  const renderServiceCard = (service, index) => {
    const imageUri = getServiceImageUri(service);
    const defaultImage = getDefaultImage(index);
    
    return (
      <Pressable key={service.id} style={styles.serviceCard}>
        <View style={styles.imageContainer}>
          {imageUri ? (
            <Image
              source={{ uri: imageUri }}
              style={styles.serviceImage}
              resizeMode="cover"
            />
          ) : (
            <Image
              source={defaultImage}
              style={styles.serviceImage}
              resizeMode="cover"
            />
          )}
          <View style={styles.serviceIconOverlay}>
            <MaterialIcons name="medical-services" size={28} color="#FFFFFF" />
          </View>
        </View>
        <View style={styles.serviceContent}>
          <Text style={styles.serviceTitle}>{service.title || service.service_name}</Text>
          {service.cost && (
            <Text style={styles.serviceCost}>â‚¹{service.cost}</Text>
          )}
          {service.duration && (
            <Text style={styles.serviceDuration}>{service.duration} mins</Text>
          )}
        </View>
      </Pressable>
    );
  };

  const renderServicesGrid = () => {
    const rows = [];
    for (let i = 0; i < services.length; i += 2) {
      const row = (
        <View key={i} style={styles.serviceRow}>
          {renderServiceCard(services[i], i)}
          {services[i + 1] && renderServiceCard(services[i + 1], i + 1)}
        </View>
      );
      rows.push(row);
    }
    return rows;
  };

  const handleLoadMore = () => {
    if (pagination.has_next_page && !loadingMore) {
      fetchServices(pagination.current_page + 1, true);
    }
  };

  const handleSearch = () => {
    fetchServices(1, false);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Common Header */}
      <CommonHeader 
        title="Services" 
        showSearch={true} 
        showNotification={false}
        onSearchChange={setSearchQuery}
        onSearchSubmit={handleSearch}
      />
      
      <ScrollView style={styles.scrollContainer} showsVerticalScrollIndicator={false}>
        {/* Services Section */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>Our Medical Services</Text>
            {!loading && (
              <Text style={styles.serviceCount}>
                {pagination.total_items} Services
                {pagination.total_pages > 1 && ` (Page ${pagination.current_page}/${pagination.total_pages})`}
              </Text>
            )}
          </View>
          
          {loading ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="large" color="#005666" />
              <Text style={styles.loadingText}>Loading services...</Text>
            </View>
          ) : error ? (
            <View style={styles.errorContainer}>
              <MaterialIcons name="error-outline" size={48} color="#FF6B6B" />
              <Text style={styles.errorText}>{error}</Text>
              <Pressable style={styles.retryButton} onPress={fetchServices}>
                <Text style={styles.retryButtonText}>Retry</Text>
              </Pressable>
            </View>
          ) : services.length > 0 ? (
            <>
              <View style={styles.servicesContainer}>
                {renderServicesGrid()}
              </View>
              
              {/* Load More Button */}
              {pagination.has_next_page && (
                <View style={styles.loadMoreContainer}>
                  {loadingMore ? (
                    <View style={styles.loadingMoreContainer}>
                      <ActivityIndicator size="small" color="#005666" />
                      <Text style={styles.loadingMoreText}>Loading more services...</Text>
                    </View>
                  ) : (
                    <Pressable style={styles.loadMoreButton} onPress={handleLoadMore}>
                      <Text style={styles.loadMoreButtonText}>Load More Services</Text>
                      <MaterialIcons name="expand-more" size={20} color="#005666" />
                    </Pressable>
                  )}
                </View>
              )}
            </>
          ) : (
            <View style={styles.emptyContainer}>
              <MaterialIcons name="medical-services" size={48} color="#CCCCCC" />
              <Text style={styles.emptyText}>No services available</Text>
            </View>
          )}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  scrollContainer: {
    flex: 1,
    paddingHorizontal: 20,
  },
  section: {
    marginTop: 20,
    marginBottom: 20,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#1a1a1a',
    textAlign: 'left',
  },
  serviceCount: {
    fontSize: 14,
    color: '#666666',
    fontWeight: '500',
  },
  servicesContainer: {
    gap: 16,
  },
  serviceRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  serviceCard: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    overflow: 'hidden',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  imageContainer: {
    position: 'relative',
    height: 140,
  },
  serviceImage: {
    width: '100%',
    height: '100%',
    backgroundColor: '#F0F0F0',
  },
  serviceIconOverlay: {
    position: 'absolute',
    bottom: 10,
    left: '50%',
    marginLeft: -25,
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#005666',
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 4,
    shadowColor: '#005666',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
  },
  serviceContent: {
    padding: 16,
    alignItems: 'center',
  },
  serviceTitle: {
    fontSize: 15,
    fontWeight: 'bold',
    color: '#1a1a1a',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 4,
  },
  serviceCost: {
    fontSize: 14,
    fontWeight: '600',
    color: '#005666',
    marginBottom: 2,
  },
  serviceDuration: {
    fontSize: 12,
    color: '#666666',
  },
  loadingContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 60,
  },
  loadingText: {
    marginTop: 10,
    fontSize: 14,
    color: '#666666',
  },
  errorContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 60,
  },
  errorText: {
    marginTop: 10,
    fontSize: 14,
    color: '#FF6B6B',
    textAlign: 'center',
    marginBottom: 16,
  },
  retryButton: {
    backgroundColor: '#005666',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 60,
  },
  emptyText: {
    marginTop: 10,
    fontSize: 14,
    color: '#999999',
    textAlign: 'center',
  },
  loadMoreContainer: {
    marginTop: 20,
    alignItems: 'center',
  },
  loadMoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  loadMoreButtonText: {
    fontSize: 14,
    color: '#005666',
    fontWeight: '600',
    marginRight: 8,
  },
  loadingMoreContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
  },
  loadingMoreText: {
    fontSize: 14,
    color: '#666666',
    marginLeft: 8,
  },
});